{"version":3,"sources":["webpack:///webpack/bootstrap d91e5de2bef1394fb0ad","webpack:///./src/classes/Board.js","webpack:///./src/classes/Player.js","webpack:///./src/index.js"],"names":["Board","state","oddarr","evenarr","move","formattedString","forEach","cell","index","slice","console","log","every","symbol","position","moves","push","curmove","isEmpty","getCurrentMove","isFull","Player","max_depth","nodes_map","Map","board","maximizing","callback","depth","constructor","name","TRACE","window","trace_ttt","clear","isTerminal","winner","console_styles","turn_and_available_moves","exploring_parent","exploring_child","parent_heuristic","child_heuristic","all_moves","best_move","p","getAvailableMoves","join","printFormattedBoard","best","getAvailableOddMoves","move_option","option","child","insert","styles","node_value","getBestMove","Math","max","has","get","set","arr","split","rand","floor","random","length","ret","value","getAvailableEvenMoves","min","hasClass","el","className","classList","contains","match","RegExp","addClass","add","removeClass","remove","reg","replace","drawWinningLine","direction","row","document","getElementById","setTimeout","newGame","starting_player","parseInt","b","innerHTML","html_cells","children","starting","player_turn","turn_next","turn","center_and_corners","odd_options","first_choice","first_symbol","addEventListener","event","target","tagName","odd_choices","choice","dataset","even_choices","turn1","turn2","depth_choices","starting_player_choices"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d91e5de2bef1394fb0ad","/**\n  * @desc This class represents the board, contains methods that checks board state, insert a symbol, etc..\n  * @param {Array} state - an array representing the state of the board\n*/\nclass Board {\n    //Initializing the board\n    constructor(state = ['','','','','','','','',''], oddarr= [1,3,5,7,9], evenarr=[2,4,6,8], move=1) {\n        this.state = state;\n        this.oddarr= oddarr;\n        this.evenarr=evenarr;\n        this.move=move;\n    }\n    //Logs a visualised board with the current state to the console\n    printFormattedBoard() {\n        let formattedString = '';\n        this.state.forEach((cell, index) => {\n            formattedString += cell ? ` ${cell} |` : '   |';\n            if((index + 1) % 3 == 0)  {\n                formattedString = formattedString.slice(0,-1);\n                if(index < 8) formattedString += '\\n\\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015\\n';\n            }\n        });\n        console.log('%c' + formattedString, 'color: #6d4e42;font-size:16px');\n    }\n    //Checks if board has no symbols yet\n    isEmpty() {\n        return this.state.every(cell => !cell);\n    }\n    //Check if board has no spaces available\n    isFull() {\n        return this.state.every(cell => cell);\n    }\n    /**\n     * Inserts a new symbol(x,o) into\n     * @param {String} symbol \n     * @param {Number} position\n     * @return {Boolean} boolean represent success of the operation\n     */\n    insert(symbol, position) {\n        if(position > 8 || this.state[position]) return false; //Cell is either occupied or does not exist\n        this.state[position] = symbol;\n        return true;\n    }\n    //Returns an array containing available moves for the current state\n    getAvailableMoves() {\n        const moves = [];\n        this.state.forEach((cell, index) => {\n            if(!cell) moves.push(index); \n        });\n        return moves;\n    }\n\n    getAvailableOddMoves() {\n         const moves = [];\n         this.oddarr.forEach((cell, index) => {\n            if(!(cell==this.move)) moves.push(cell); \n        });\n         return moves;\n    }\n\n    getAvailableEvenMoves() {\n        const moves = [];\n         this.evenarr.forEach((cell, index) => {\n            if(!(cell==this.move)) moves.push(cell); \n        });\n         return moves;\n    }\n\n    getCurrentMove() {\n        curmove= (this.move/2)==0 ? 'even' : 'odd';\n        return curmove;\n    }\n    /**\n     * Checks if the board has a terminal state ie. a player wins or the board is full with no winner\n     * @return {Object} an object containing the winner, direction of winning and row number\n     */\n    isTerminal() {\n        //Return False if board in empty\n        if(this.isEmpty()) return false;\n\n        //Checking Horizontal Wins\n        if((this.state[0] + this.state[1] + this.state[2] == 15) && this.state[1] && this.state[0] && this.state[2]  ) {\n            return {'winner': getCurrentMove(), 'direction': 'H', 'row': 1};\n        }\n        if((this.state[3] + this.state[4] + this.state[5] == 15) && this.state[3] && this.state[4] && this.state[5] ) {\n            return {'winner': getCurrentMove(), 'direction': 'H', 'row': 2};\n        }\n        if((this.state[6] + this.state[7] + this.state[8] == 15) && this.state[6] && this.state[7] && this.state[8] ) {\n            return {'winner': getCurrentMove(), 'direction': 'H', 'row': 3};\n        }\n\n        //Checking Vertical Wins\n        if((this.state[0] + this.state[3] + this.state[6] == 15) && this.state[6] && this.state[0] && this.state[3] ) {\n            return {'winner': getCurrentMove(), 'direction': 'V', 'row': 1};\n        }\n        if((this.state[1] + this.state[7] + this.state[4] == 15) && this.state[1] && this.state[7] && this.state[4] ) {\n            return {'winner': getCurrentMove(), 'direction': 'V', 'row': 2};\n        }\n        if((this.state[2] + this.state[5] + this.state[8] == 15) && this.state[2] && this.state[5] && this.state[8] ) {\n            return {'winner': getCurrentMove(), 'direction': 'V', 'row': 3};\n        }\n\n        //Checking Diagonal Wins\n        if((this.state[0] + this.state[4] + this.state[8] == 15) && this.state[0] && this.state[4] && this.state[8] ) {\n            return {'winner': getCurrentMove(), 'direction': 'D', 'row': 1};\n        }\n        if((this.state[2] + this.state[4] + this.state[6] == 15) && this.state[6] && this.state[4] && this.state[2] ) {\n            return {'winner': getCurrentMove(), 'direction': 'D', 'row': 2};\n        }\n\n        //If no winner but the board is full, then it's a draw\n        if(this.isFull()) {\n            return {'winner': 'draw'};\n        }\n        \n        //return false otherwise\n        return false;\n    }\n}\n\nexport default Board;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Board.js","import Board from './Board';\n\n/**\n  * @desc This class represents the computer player, contains a single method that uses minimax to get the best move\n  * @param {Number} max_depth - limits the depth of searching\n  * @param {Map} nodes_map - stores the heuristic values for each possible move\n*/\nclass Player {\n\tconstructor(max_depth = -1) {\n        this.max_depth = max_depth;\n        this.nodes_map = new Map();\n    }\n    /**\n     * Uses minimax algorithm to get the best move\n     * @param {Object} board - an instant of the board class\n     * @param {Boolean} maximizing - whether the player is a maximizing or a minimizing player\n     * @param {Function} callback - a function to run after the best move calculation is done\n     * @param {Number} depth - used internally in the function to increment the depth each recursive call\n     * @return {Number} the index of the best move\n     */\n\tgetBestMove(board, maximizing = true, callback = () => {}, depth = 0) {\n\t\t//Throw an error if the first argument is not a board\n\t\tif(board.constructor.name !== \"Board\") throw('The first argument to the getBestMove method should be an instance of Board class.');\n\t\t//Decides whether to log each tree iteration to the console\n\t\tconst TRACE = window.trace_ttt; \n\t\t//clear nodes_map if the function is called for a new move\n\t\tif(depth == 0) this.nodes_map.clear();\n\n\t\t//If the board state is a terminal one, return the heuristic value\n\t\tif(board.isTerminal() || depth == this.max_depth ) {\n\t\t\tif(board.isTerminal().winner == 'odd') {\n\t\t\t\treturn 100 - depth;\n\t\t\t} else if (board.isTerminal().winner == 'even') {\n\t\t\t\treturn -100 + depth;\n\t\t\t} \n\t\t\treturn 0;\n\t\t}\n\n\t\t//Defining some styles for console logging\n\t\tconst console_styles = {\n\t\t\tturn_and_available_moves: 'background: #7f3192; color: #fff; font-size:14px;padding: 0 5px;',\n\t\t\texploring_parent: 'background: #353535;color: #fff;padding: 0 5px;font-size:18px',\n\t\t\texploring_child: 'background: #f03;color: #fff;padding: 0 5px',\n\t\t\tparent_heuristic: 'background: #26d47c; color: #fff; font-size:14px;padding: 0 5px;',\n\t\t\tchild_heuristic: 'background: #5f9ead; color: #fff; font-size:14px;padding: 0 5px;',\n\t\t\tall_moves: 'background: #e27a50;color: #fff;padding: 0 5px;font-size:14px',\n\t\t\tbest_move: 'background: #e8602a;color: #fff;padding: 0 5px;font-size:18px'\n\t\t};\n\t\t//Destructuring Styles\n\t\tconst {turn_and_available_moves, exploring_parent, exploring_child, child_heuristic, parent_heuristic, all_moves, best_move} = console_styles;\n\n\t\t//Console Tracing Code\n\t\tif(TRACE) {\n\t\t\tlet p = maximizing ? 'Maximizing' : 'Minimizing';\n\t\t\tconsole.log(`%c${p} player's turn Depth: ${depth}`, turn_and_available_moves);\n\t\t\tconsole.log(`%cAvailable Moves: ${board.getAvailableMoves().join(' ')}`, turn_and_available_moves);\n\t\t\tif(depth == 0) board.printFormattedBoard();\n\t\t}\n\n\t\t//Current player is maximizing\n\t\tif(maximizing) {\n\t\t\t//Initializ best to the lowest possible value\n\t\t\tlet best = -100;\n\t\t\t//Loop through all empty cells\n\t\t\tboard.getAvailableMoves().forEach(index => {\n\t\t\t\tboard.getAvailableOddMoves().forEach(option =>{\n\n\t\t\t\t\tlet move_option= this.oddarr[option];\n\t\t\t\t\tthis.move=move_option;\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\n\t\t\t\t\tlet child = new Board(board.state.slice(), board.oddarr.slice(),board.evenarr.slice(), board.move.slice());\n\t\t\t\t//Create a child node by inserting the maximizing symbol x into the current emoty cell\n\t\t\t\t\tchild.insert(move_option, index);\n\t\t\t\t})\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tlet styles = (depth == 0) ? exploring_parent : exploring_child;\n\t\t\t\t\tconsole.log(`%cExploring move ${index}`, styles);\n\t\t\t\t\tchild.printFormattedBoard();\n\t\t\t\t}\n\n\t\t\t\t//Recursively calling getBestMove this time with the new board and minimizing turn and incrementing the depth\n\t\t\t\tlet node_value = this.getBestMove(child, false, callback, depth + 1);\n\t\t\t\t//Updating best value\n\t\t\t\tbest = Math.max(best, node_value);\n\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tif(depth == 0) {\n\t\t\t\t\t\tconsole.log(`%cMove ${index} yielded a heuristic value of ${node_value}`, parent_heuristic);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(`%cChild move ${index} yielded a heuristic value of ${node_value}`, child_heuristic);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\n\t\t\t\tif(depth == 0) {\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? `${this.nodes_map.get(node_value)},${index}` : index;\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\n\t\t\t\t}\n\t\t\t});\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\n\t\t\tif(depth == 0) {\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\n\t\t\t\t\tvar ret = arr[rand];\n\t\t\t\t} else {\n\t\t\t\t\tret = this.nodes_map.get(best);\n\t\t\t\t}\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tthis.nodes_map.forEach((index,value) => {\n\t\t\t\t\t\tconsole.log(`%cMove(s) ${index} yielded ${value}`, all_moves);\n\t\t\t\t\t});\n\t\t\t\t\tconsole.log(`%cMove ${ret} was decided as the best move`, best_move);\n\t\t\t\t}\n\t\t\t\t//run a callback after calculation and return the index\n\t\t\t\tcallback(ret);\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\n\t\t\treturn best;\n\t\t}\n\n\t\tif(!maximizing) {\n\t\t\t//Initializ best to the highest possible value\n\t\t\tlet best = 100;\n\t\t\t//Loop through all empty cells\n\t\t\tboard.getAvailableMoves().forEach(index => {\n\t\t\t\tboard.getAvailableEvenMoves().forEach(option =>{\n\n\t\t\t\t\tlet move_option= this.evenarr[option];\n\t\t\t\t\tthis.move=move_option;\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\n\t\t\t\t\tlet child = new Board(board.state.slice(), board.oddarr.slice(),board.evenarr.slice(), board.move.slice());\n\t\t\t\t//Create a child node by inserting the maximizing symbol x into the current emoty cell\n\t\t\t\t\tchild.insert(move_option, index);\n\t\t\t\t})\n\t\t\t\t\n\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tlet styles = (depth == 0) ? exploring_parent : exploring_child; \n\t\t\t\t\tconsole.log(`%cExploring move ${index}`, styles);\n\t\t\t\t\tchild.printFormattedBoard();\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//Recursively calling getBestMove this time with the new board and maximizing turn and incrementing the depth\n\t\t\t\tlet node_value = this.getBestMove(child, true, callback, depth + 1);\n\t\t\t\t//Updating best value\n\t\t\t\tbest = Math.min(best, node_value);\n\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tif(depth == 0) {\n\t\t\t\t\t\tconsole.log(`%cMove ${index} yielded a heuristic value of ${node_value}`, parent_heuristic);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(`%cChild move ${index} yielded a heuristic value of ${node_value}`, child_heuristic);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\n\t\t\t\tif(depth == 0) {\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? this.nodes_map.get(node_value) + ',' + index : index;\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\n\t\t\t\t}\n\t\t\t});\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\n\t\t\tif(depth == 0) {\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\n\t\t\t\t\tvar ret = arr[rand];\n\t\t\t\t} else {\n\t\t\t\t\tret = this.nodes_map.get(best);\n\t\t\t\t}\n\t\t\t\t//Console Tracing Code\n\t\t\t\tif(TRACE) {\n\t\t\t\t\tthis.nodes_map.forEach((index,value) => {\n\t\t\t\t\t\tconsole.log(`%cMove(s) ${index} yielded ${value}`, all_moves);\n\t\t\t\t\t});\n\t\t\t\t\tconsole.log(`%cMove ${ret} was decided as the best move`, best_move);\n\t\t\t\t}\n\t\t\t\t//run a callback after calculation and return the index\n\t\t\t\tcallback(ret);\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\n\t\t\treturn best;\n\t\t}\n\n\t}\n}\n\nexport default Player;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Player.js","import Board from './classes/Board';\nimport Player from './classes/Player';\nimport './style.scss';\n\n//Helpers (from http://jaketrent.com/post/addremove-classes-raw-javascript/)\nfunction hasClass(el, className) {\n  if (el.classList)\n    return el.classList.contains(className);\n  else\n    return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\n}\nfunction addClass(el, className) {\n  if (el.classList)\n    el.classList.add(className);\n  else if (!hasClass(el, className)) el.className += \" \" + className;\n}\nfunction removeClass(el, className) {\n  if (el.classList)\n    el.classList.remove(className);\n  else if (hasClass(el, className)) {\n    var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n    el.className=el.className.replace(reg, ' ');\n  }\n}\n\n/*\nHelper function that takes the object returned from isTerminal() and adds a \nclass to the board that will handle drawing the winning line's animation\n*/\nfunction drawWinningLine({ direction, row }) {\n\tlet board = document.getElementById(\"board\");\n\tboard.className = `${direction}${row}`;\n\tsetTimeout(() => { board.className += ' full'; }, 50);\n}\n\n\n//Starts a new game with a certain depth and a starting_player of 1 if human is going to start\nfunction newGame(depth = -1, starting_player = 1) {\n\t//Instantiating a new player and an empty board\n\tlet p = new Player(parseInt(depth));\n\tlet b = new Board(['','','','','','','','','']);\n\n\t//Clearing all #Board classes and populating cells HTML\n\tlet board = document.getElementById(\"board\");\n\tboard.className = '';\n\tboard.innerHTML = '<div class=\"cell-0\"></div><div class=\"cell-1\"></div><div class=\"cell-2\"></div><div class=\"cell-3\"></div><div class=\"cell-4\"></div><div class=\"cell-5\"></div><div class=\"cell-6\"></div><div class=\"cell-7\"></div><div class=\"cell-8\"></div>';\n\t\n\t//Clearing all celebrations classes\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_human');\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_robot');\n\n\t//Storing HTML cells in an array\n\tlet html_cells = [...board.children];\n\n\t//Initializing some variables for internal use\n\tlet starting = parseInt(starting_player),\n\t\tmaximizing = starting,\n\t\tplayer_turn = starting;\n\t\tturn_next= parseInt(turn);\n\t\tturn=1;\n\t//If computer is going to start, choose a random cell as long as it is the center or a corner\n\tif(!starting) {\n\t\tlet center_and_corners = [0,2,4,6,8];\n\t\tlet odd_options=[1,3,5,7,9];\n\t\tlet first_choice = center_and_corners[Math.floor(Math.random()*center_and_corners.length)];\n\t\tlet first_symbol= odd_options[Math.floor(Math.random()*odd_options.length)];\n\t\t//let symbol = !maximizing ? 'o' : 'x';\n\t\tb.insert(first_symbol, first_choice);\n\t\tb.move=first_symbol;\n\t\taddClass(html_cells[first_choice], first_symbol);\n\t\tplayer_turn = 0; //Switch turns\n\t}\n\n\t//Adding Click event listener for each cell\n  \tb.state.forEach((cell, index) => {\n  \t\thtml_cells[index].addEventListener('click', () => {\n  \t\t\t//If cell is already occupied or the board is in a terminal state or it's not humans turn, return false\n  \t\t\tif(/*hasClass(html_cells[index], 'x') || hasClass(html_cells[index], 'o')|| */b.isTerminal() || !player_turn) return false;\n\n\t  \t\tif(maximizing) {\t\n\t  \t\t\tdocument.getElementById(\"turn1\").addEventListener(\"click\", (event) => {\n\t\t\t\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\n\t\t\t\t\tlet odd_choices = [...document.getElementById(\"turn1\").children[0].children];\n\t\t\t\t\todd_choices.forEach((choice) => {\n\t\t\t\t\n\t\t\t\t\t\tremoveClass(choice, 'active');\n\t\t\t\t\t\taddClass(choice, 'visited');\n\t\t\t\t\t});\n\t\t\t\t\taddClass(event.target, 'active');\n\t\t\t\t\tturn = event.target.dataset.value;\n\t\t\t\t}, false);\n\t  \t\t}\n\n\t  \t\tif(!maximizing) {\n\t\t\t\tdocument.getElementById(\"turn2\").addEventListener(\"click\", (event) => {\n\t\t\t\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\n\t\t\t\t\tlet even_choices = [...document.getElementById(\"turn2\").children[0].children];\n\t\t\t\t\teven_choices.forEach((choice) => {\n\t\t\t\t\n\t\t\t\t\t\tremoveClass(choice, 'active');\n\t\t\t\t\t\taddClass(choice, 'visited');\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\taddClass(event.target, 'active');\n\t\t\t\t\tturn = event.target.dataset.value;\n\t\t\t\t}, false);\n\t\t\t}\n\t\n\t\n  \t\t\tlet symbol =parseInt(turn)\n  \t\t\t// maximizing ? turnodd : turneven; //Maximizing player is always 'x'\n\n  \t\t\t//Update the Board class instance as well as the Board UI\n  \t\t\tb.insert(symbol, index);\n  \t\t\taddClass(html_cells[index], symbol);\n\n  \t\t\t//If it's a terminal move and it's not a draw, then human won\n  \t\t\tif(b.isTerminal()) {\n  \t\t\t\tlet { winner } = b.isTerminal();\n\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_human');\n  \t\t\t\tdrawWinningLine(b.isTerminal());\n  \t\t\t}\n  \t\t\tplayer_turn = 0; //Switch turns\n\n  \t\t\t//Get computer's best move and update the UI\n  \t\t\tp.getBestMove(b, !maximizing, best => {\n  \t\t\t\tlet symbol = b.move\n  \t\t\t\tb.insert(symbol, best);\n  \t\t\t\taddClass(html_cells[best], symbol);\n  \t\t\t\tif(b.isTerminal()) {\n\t  \t\t\t\tlet { winner } = b.isTerminal();\n\t\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_robot');\n\t  \t\t\t\tdrawWinningLine(b.isTerminal());\n\t  \t\t\t}\n  \t\t\t\tplayer_turn = 1; //Switch turns\n  \t\t\t});\n  \t\t}, false);\n  \t\tif(cell) addClass(html_cells[index], cell);\n  \t});\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", event => { \n\n\t//Start a new game when page loads with default values\n\tlet depth = -1;\n\tlet starting_player = 1;\n\tlet turn1= 1;\n\tlet turn2= 2;\n\tnewGame(depth, starting_player);\n\n\n\t//Events handlers for depth, starting player options\n\tdocument.getElementById(\"depth\").addEventListener(\"click\", (event) => {\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\n\t\tlet depth_choices = [...document.getElementById(\"depth\").children[0].children];\n\t\tdepth_choices.forEach((choice) => {\n\t\t\tremoveClass(choice, 'active');\n\t\t});\n\t\taddClass(event.target, 'active');\n\t\tdepth = event.target.dataset.value;\n\t}, false);\n\n\tdocument.getElementById(\"starting_player\").addEventListener(\"click\", (event) => {\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\n\t\tlet starting_player_choices = [...document.getElementById(\"starting_player\").children[0].children];\n\t\tstarting_player_choices.forEach((choice) => {\n\t\t\tremoveClass(choice, 'active');\n\t\t});\n\t\taddClass(event.target, 'active');\n\t\tstarting_player = event.target.dataset.value;\n\t}, false);\n\n\tdocument.getElementById(\"newgame\").addEventListener('click', function () {\n\t\tnewGame(depth, starting_player);\n\t});\n\n});\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}